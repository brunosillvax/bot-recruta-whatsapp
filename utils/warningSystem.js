// FILE: utils/warningSystem.js (VERS√ÉO FINAL COM AS DUAS CORRE√á√ïES)

const { db, FieldValue } = require('../config');
const {} = require('./playerUtils');
const config = require('../config');
const logger = require('./logger'); // Importa o logger

// ===== CORRE√á√ÉO 2: FUN√á√ÉO DE PAUSA PARA EVITAR RATE-LIMIT =====
// Adicionamos esta fun√ß√£o auxiliar no in√≠cio do arquivo.
const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

// Fun√ß√£o sendWarningNotification (sem altera√ß√µes)
async function sendWarningNotification(player, newWarnings, reason, context) {
    // ... (esta fun√ß√£o permanece exatamente igual)
    const { sock, from, reply } = context;
    const canMention = player.whatsappId && player.whatsappId.includes('@');
    const mentionId = canMention ? player.whatsappId.split('@')[0] : player.name;
    const leaderMention = `@${config.leaderJid.split('@')[0]}`;

    if (newWarnings >= 5) {
        let kickMessage = `üö® @${mentionId} (Nick: *${player.name}*) foi advertido(a) por *${reason}*.\n\n`;
        kickMessage += `üìµ ATINGIU 5 ADVERT√äNCIAS E FOI REMOVIDO(A) DA LISTA üìµ`;
        await sock.sendMessage(from, { text: kickMessage, mentions: canMention ? [player.whatsappId] : [] });
        return;
    }
    if (newWarnings === 4) {
        let finalWarningMessage = `‚ò†Ô∏è *SENTEN√áA FINAL - EXPULS√ÉO IMINENTE* ‚ò†Ô∏è\n\n`;
        finalWarningMessage += `@${mentionId} (Nick: *${player.name}*), sua perman√™ncia no cl√£ est√° por um fio. Voc√™ atingiu **4/5 advert√™ncias**.\n\n`;
        finalWarningMessage += `*N√ÉO H√Å MAIS MARGEM PARA ERROS.*\n\n`;
        finalWarningMessage += `Considere esta a sua notifica√ß√£o final. A pr√≥xima infra√ß√£o, n√£o importa qual seja, resultar√° na sua *remo√ß√£o imediata e definitiva*. Sem negocia√ß√£o. Sem segundas chances.\n\n`;
        finalWarningMessage += `Sua √∫nica e √∫ltima esperan√ßa √© contatar o l√≠der ${leaderMention} *AGORA* e justificar por que voc√™ deve permanecer. A decis√£o dele ser√° final.`;
        const mentions = [config.leaderJid];
        if (canMention) mentions.push(player.whatsappId);
        await sock.sendMessage(from, { text: finalWarningMessage, mentions });
        return;
    }
    if (newWarnings === 3) {
        let alertMessage = `üî• *ATEN√á√ÉO: ZONA DE ALERTA* üî•\n\n`;
        alertMessage += `@${mentionId} (Nick: *${player.name}*), voc√™ atingiu **3/5 advert√™ncias**.\n\n`;
        alertMessage += `Este √© um aviso s√©rio. Para evitar futuras penalidades, voc√™ precisa agir.\n\n`;
        alertMessage += `*Sua miss√£o:*\n`;
        alertMessage += `1. Converse com o l√≠der ${leaderMention} para entender como melhorar.\n`;
        alertMessage += `2. Adote a TAG oficial do cl√£: \`„Ää‚òÜ„Äã·¥ø·∂ª\`\n\n`;
        alertMessage += `Ao fazer isso, a lideran√ßa poder√° reavaliar seu caso. N√£o deixe para depois!`;
        const mentions = [config.leaderJid];
        if (canMention) mentions.push(player.whatsappId);
        await sock.sendMessage(from, { text: alertMessage, mentions });
        return;
    }
    if (newWarnings === 2) {
        const riskMessage = `üî• @${mentionId} (Nick: *${player.name}*) entrou na *ZONA DE RISCO*. Total agora: ${newWarnings}/5.`;
        await sock.sendMessage(from, { text: riskMessage, mentions: canMention ? [player.whatsappId] : [] });
        return;
    }
    if (newWarnings === 1) {
        if (reason === "advert√™ncia manual") {
            await reply(`‚úÖ Advert√™ncia manual aplicada a *${player.name}*. Total agora: ${newWarnings}/5.`);
        } else {
            const warningMessage = `üö® @${mentionId} (Nick: *${player.name}*) foi advertido(a) por *${reason}*. Total agora: ${newWarnings}/5.`;
            await sock.sendMessage(from, { text: warningMessage, mentions: canMention ? [player.whatsappId] : [] });
        }
    }
}

// Fun√ß√£o applyAutomaticWarning (sem altera√ß√µes)
async function applyAutomaticWarning(player, reason, context) {
    // ... (esta fun√ß√£o permanece exatamente igual)
    if (!player || !player.id) {
        logger.error("‚ùå Erro Cr√≠tico: Tentativa de punir um jogador inv√°lido."); // Usando logger.error
        return player.warnings || 0;
    }
    const playerRef = db.collection('players').doc(player.id);
    const newWarnings = (player.warnings || 0) + 1;

    if (newWarnings >= 5) {
        await sendWarningNotification(player, newWarnings, reason, context);
        if (player.whatsappId) {
            const allGroups = await context.sock.groupFetchAllParticipating();
            for (const groupId in allGroups) {
                try { await context.sock.groupParticipantsUpdate(groupId, [player.whatsappId], 'remove'); } catch (e) { }
            }
        }
        await playerRef.delete();
    } else {
        await playerRef.update({ warnings: newWarnings });
        await sendWarningNotification(player, newWarnings, reason, context);
    }
    return newWarnings;
}

// Fun√ß√£o runPostScoreChecks (sem altera√ß√µes)
async function runPostScoreChecks(playerId, userId, updateInfo, sock, from) {
    // ... (esta fun√ß√£o permanece exatamente igual)
    const context = { sock, from, reply: (text) => sock.sendMessage(from, { text }) };
    try {
        const playerRef = db.collection('players').doc(playerId);
        let playerDocSnap = await playerRef.get();
        if (!playerDocSnap.exists) return;
        let playerData = { id: playerDocSnap.id, ...playerDocSnap.data() };

        if (updateInfo.type === 'war' && updateInfo.points > 0 && updateInfo.points < 550) {
            const reason = "pontua√ß√£o abaixo do m√≠nimo (550)";
            await applyAutomaticWarning(playerData, reason, context);
        }
    } catch (error) {
        logger.error("‚ùå Erro cr√≠tico em 'runPostScoreChecks':", error); // Usando logger.error
    }
}

/**
 * Verifica os dias anteriores de um jogador em busca de faltas n√£o advertidas e aplica advert√™ncias.
 * Esta fun√ß√£o √© chamada quando um jogador lan√ßa pontos para o dia atual.
 * @param {object} player O objeto do jogador (com id, dailyPoints, warnedAbsences, etc.).
 * @param {number} currentDayIndex O √≠ndice do dia da semana para o qual os pontos est√£o sendo lan√ßados (0=Qui, 1=Sex, etc.).
 * @param {object} context O contexto do bot (sock, from, reply).
 * @returns {Promise<void>}
 */
async function checkPreviousAbsencesAndWarnForPlayer(player, currentDayIndex, context) {
    const playerRef = db.collection('players').doc(player.id);
    let currentPlayerData = { ...player };

    logger.debug(`Iniciando verifica√ß√£o de faltas anteriores para ${currentPlayerData.name} at√© o dia ${config.dayNames[currentDayIndex]}.`);

    for (let dayIndex = 0; dayIndex < currentDayIndex; dayIndex++) {
        // Se o jogador foi removido por advert√™ncias anteriores, paramos aqui
        if (!currentPlayerData || currentPlayerData.warnings >= 5) {
            logger.debug(`Jogador ${currentPlayerData?.name || player.name} removido ou com advert√™ncias m√°ximas. Parando verifica√ß√£o de faltas anteriores.`);
            break;
        }

        const dailyPoints = currentPlayerData.dailyPoints || [-1, -1, -1, -1];
        const warnedAbsences = currentPlayerData.warnedAbsences || [];

        // Verifica se houve falta (0 pontos) e se j√° n√£o foi advertido para aquele dia
        if (dailyPoints[dayIndex] === 0 && !warnedAbsences.includes(dayIndex)) {
            const reason = `n√£o participar da guerra de ${config.dayNames[dayIndex]} (advert√™ncia tardia)`;
            
            logger.warn(`Aplicando advert√™ncia atrasada para ${currentPlayerData.name} por falta em ${config.dayNames[dayIndex]}.`);

            // Adiciona o dia √† lista de faltas advertidas
            await playerRef.update({ warnedAbsences: FieldValue.arrayUnion(dayIndex) });

            // Recarrega os dados do jogador para garantir que temos as informa√ß√µes mais recentes para aplicar a advert√™ncia
            const updatedPlayerDoc = await playerRef.get();
            if (updatedPlayerDoc.exists) {
                currentPlayerData = { id: updatedPlayerDoc.id, ...updatedPlayerDoc.data() };
                // Aplica a advert√™ncia
                await applyAutomaticWarning(currentPlayerData, reason, context);
                
                // Recarrega os dados novamente, caso a advert√™ncia tenha levado √† expuls√£o
                const finalCheckDoc = await playerRef.get();
                if (!finalCheckDoc.exists) {
                   currentPlayerData = null; // Marca como nulo se o jogador foi expulso
                } else {
                   currentPlayerData = { id: finalCheckDoc.id, ...finalCheckDoc.data() };
                }
            } else {
                currentPlayerData = null; // Se o jogador n√£o existe mais por algum motivo
            }
        }
    }
    logger.debug(`Verifica√ß√£o de faltas anteriores para ${player.name} conclu√≠da.`);
    return currentPlayerData; // Retorna os dados atualizados do jogador
}

/**
 * Realiza uma verifica√ß√£o final de faltas para todos os jogadores da guerra que acabou de terminar.
 * Esta fun√ß√£o deve ser chamada no in√≠cio de uma nova guerra (e.g., pelo comando /novaGuerra).
 * @param {object} context O contexto do bot (sock, from, reply).
 * @returns {Promise<void>}
 */
async function checkPreviousWarAbsences(context) {
    logger.debug('Iniciando verifica√ß√£o FINAL de faltas da guerra anterior para todos os jogadores...');
    const playersRef = db.collection('players');
    const allPlayersSnapshot = await playersRef.get();

    if (allPlayersSnapshot.empty) {
        logger.debug('Nenhum jogador na lista para verificar faltas da guerra anterior.');
        return;
    }

    for (const playerDoc of allPlayersSnapshot.docs) {
        try {
            let playerData = { id: playerDoc.id, ...playerDoc.data() };
            // Verificamos os 4 dias da semana de guerra (Qui, Sex, S√°b, Dom)
            for (let dayIndex = 0; dayIndex < 4; dayIndex++) {
                // Se o jogador j√° foi removido ou atingiu o limite de advert√™ncias, paramos aqui
                if (!playerData || playerData.warnings >= 5) {
                    logger.debug(`Jogador ${playerData?.name || playerDoc.id} j√° removido ou com advert√™ncias m√°ximas. Pulando verifica√ß√£o de faltas anteriores.`);
                    break; 
                }

                const dailyPoints = playerData.dailyPoints || [-1, -1, -1, -1];
                const warnedAbsences = playerData.warnedAbsences || [];

                // Se houver 0 pontos e ainda n√£o advertido para esse dia
                if (dailyPoints[dayIndex] === 0 && !warnedAbsences.includes(dayIndex)) {
                    const reason = `n√£o participar da guerra de ${config.dayNames[dayIndex]} (verifica√ß√£o p√≥s-guerra)`;
                    
                    logger.warn(`Aplicando advert√™ncia FINAL para ${playerData.name} por falta em ${config.dayNames[dayIndex]} da guerra anterior.`);

                    // Adiciona o dia √† lista de faltas j√° advertidas
                    await playersRef.doc(playerData.id).update({ warnedAbsences: FieldValue.arrayUnion(dayIndex) });

                    // Recarrega os dados para aplicar a advert√™ncia com as infos mais recentes
                    const updatedPlayerDoc = await playersRef.doc(playerData.id).get();
                    if (updatedPlayerDoc.exists) {
                        playerData = { id: updatedPlayerDoc.id, ...updatedPlayerDoc.data() };
                        await applyAutomaticWarning(playerData, reason, context);
                        
                        // Recarrega novamente caso a advert√™ncia tenha levado √† expuls√£o
                        const finalCheckDoc = await playersRef.doc(playerData.id).get();
                        if (!finalCheckDoc.exists) {
                           playerData = null;
                        } else {
                           playerData = { id: finalCheckDoc.id, ...finalCheckDoc.data() };
                        }
                    } else {
                        playerData = null;
                    }
                }
            }
        } catch (error) {
            logger.error(`‚ùå Erro ao processar faltas finais para o jogador ${playerDoc.data()?.name || 'ID INDEFINIDO'} (ID: ${playerDoc.id}):`, error);
        }
        // Pequena pausa para evitar rate-limit no Firebase se houver muitos jogadores
        const randomDelay = Math.floor(Math.random() * 500) + 200; // Pausa entre 200ms e 700ms
        await delay(randomDelay);
    }
    logger.debug('Verifica√ß√£o FINAL de faltas da guerra anterior conclu√≠da.');
}

module.exports = {
    runPostScoreChecks,
    sendWarningNotification,
    checkPreviousAbsencesAndWarnForPlayer,
    checkPreviousWarAbsences, // NOVO: Exporta a fun√ß√£o de verifica√ß√£o p√≥s-guerra
};
