const { db } = require('../config');
const { findPlayerByWaId } = require('../utils/playerUtils');
const logger = require('../utils/logger');

/**
 * Comando /cadastro - Permite jogadores j√° registrados atualizarem suas informa√ß√µes
 * Verifica se o jogador est√° registrado e inicia fluxo interativo de atualiza√ß√£o
 */
async function handleCadastro({ reply, userId, userStates, setUserTimeout }) {
    try {
        // Verificar se o jogador est√° registrado
        const findResult = await findPlayerByWaId(userId);
        
        if (findResult.status === 'not_found') {
            return reply(
                '‚ùå Voc√™ n√£o est√° cadastrado no sistema!\n\n' +
                'Use */nome* para fazer seu primeiro cadastro com todas as informa√ß√µes.'
            );
        }

        const playerData = findResult.data;
        
        // Inicializar sess√£o de conversa√ß√£o para atualiza√ß√£o
        userStates.set(userId, {
            step: 'awaiting_update_level',
            playerId: playerData.id,
            updateData: {
                levelXP: playerData.levelXP || 0,
                kingTower: playerData.kingTower || 0,
                trophies: playerData.trophies || 0,
                navalDefensePoints: playerData.navalDefensePoints || 0
            }
        });

        setUserTimeout(userId);

        const currentLevel = playerData.levelXP || 'N√£o informado';
        
        return reply(
            `üìù *Vamos atualizar suas informa√ß√µes, ${playerData.name}!*\n\n` +
            `*N√≠vel XP* (atual: ${currentLevel})\n` +
            `Digite o novo valor ou "." para manter:`
        );

    } catch (error) {
        logger.error('‚ùå Erro no comando /cadastro:', error);
        return reply('‚ùå Ocorreu um erro ao verificar seu cadastro. Tente novamente.');
    }
}

module.exports = {
    name: 'cadastro',
    handler: handleCadastro,
    isAdminCommand: false
};
